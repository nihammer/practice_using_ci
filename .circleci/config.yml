# Use the latest 2.1 version of CircleCI pipeline process engine.
# See: https://circleci.com/docs/2.0/configuration-reference
version: 2.1

# Orbs are reusable packages of CircleCI configuration that you may share across projects, enabling you to create encapsulated, parameterized commands, jobs, and executors that can be used across multiple projects.
# See: https://circleci.com/docs/2.0/orb-intro/
# orbs:
  # The python orb contains a set of prepackaged CircleCI configuration you can use repeatedly in your configuration files
  # Orb commands and jobs help you with common scripting around a language/tool
  # so you dont have to copy and paste it everywhere.
  # See the orb documentation here: https://circleci.com/developer/orbs/orb/circleci/python
  # python: circleci/python@1.5.0

commands:
  first_command:
    parameters: 
      env_name:
        type: string
    steps:
      - checkout
      - run:
          name: print the current environment name
          command: |
            echo "The current environment name in this test is << parameters.env_name >>"
            if [ "<< parameters.env_name >>" == "production" ]; then
              echo "This is the production environment."
            elif [ "<< parameters.env_name >>" == "development" ]; then
              echo "This is the development environment."
            fi

  second_command:
    parameters: 
      env_file_path:
        type: string
      deploy_file_name:
        type: string
    steps:
      - run:
          name: print the s3 file path
          command: |
            echo "S3 URL: s3://path-url.com/<< parameters.env_file_path >>"
      - run:
          name: deploy
          command: |
            chmod +x ./scripts/*
            ./scripts/<< parameters.deploy_file_name >>.sh

# Define a job to be invoked later in a workflow.
# See: https://circleci.com/docs/2.0/configuration-reference/#jobs
jobs:
  build: # This is the name of the job, feel free to change it to better match what you're trying to do!
    # Checkout the code as the first step. This is a dedicated CircleCI step.
    # The python orb's install-packages step will install the dependencies from a Pipfile via Pipenv by default.
    # Here we're making sure we use just use the system-wide pip. By default it uses the project root's requirements.txt.
    # Then run your tests!
    # CircleCI will report the results back to your VCS provider.
    parameters: 
      env:
        type: string
    docker:
      - image: cimg/python:3.8.4
    steps:
      - checkout
      - run:
          name: Debug
          command: |
            echo "The current environment name in the build job is << parameters.env >>"
  development:
    docker:
      - image: cimg/python:3.8.4
    steps:
      - first_command:
          env_name: development
      - second_command:
          env_file_path: config/.env.development
          deploy_file_name: deploy
  production:
    docker:
      - image: cimg/python:3.8.4
    steps:
      - first_command:
          env_name: production
      - second_command:
          env_file_path: config/.env.production
          deploy_file_name: deploy

# Invoke jobs via workflows
# See: https://circleci.com/docs/2.0/configuration-reference/#workflows
workflows:
  sample: # This is the name of the workflow, feel free to change it to better match your workflow.
    # Inside the workflow, you define the jobs you want to run.
    jobs:
      - build:
          name: build-development
          env: development
          filters:
            branches:
              only: dev
      - build:
          name: build-production
          env: production
          filters:
            branches:
              only: main
      - development:
          requires:
            - build-development
          filters:
            branches:
              only: dev
      - production:
          requires:
            - build-production
          filters:
            branches:
              only: main
